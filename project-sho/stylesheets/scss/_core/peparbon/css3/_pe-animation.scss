/*
---
name: pe-animation()
library:
  - Peparbon/CSS3
  - Peparbon/CSS3/pe-animation()
---

| IE    | Chrome | Firefox | Safari | Opera  | iOS   | Android | Can I use                                               |
| ----- | ------ | ------- | ------ | ------ | ----- | ------- | ------------------------------------------------------- |
| `10`  | `OK`   | `5`     | `4`    | `12.1` | `2`   | `2.1`   | [CSS Animation](http://caniuse.com/#feat=css-animation) |

| @mixin 名                  | @mixin 引数値              | 備考 |
| -------------------------- | -------------------------- | ---- |
| `CSS プロパティ名` と 同じ | `CSS プロパティ値` と 同じ | -    |

```scss
@mixin pe-animation($animations...) {
  ...
}
@mixin pe-animation-name($names...) {
  ...
}
@mixin pe-animation-duration($times...) {
  ...
}
@mixin pe-animation-timing-function($motions...) {
  ...
}
@mixin pe-animation-iteration-count($values...) {
  ...
}
@mixin pe-animation-direction($directions...) {
  ...
}
@mixin pe-animation-play-state($states...) {
  ...
}
@mixin pe-animation-delay($times...) {
  ...
}
@mixin pe-animation-fill-mode($modes...) {
  ...
}
```

```scss
.class-name {
  @include pe-animation(all 2.0s ease);
}
```

```css
.class-name {
  -webkit-animation: all 2s ease;
  -moz-animation: all 2s ease;
  animation: all 2s ease;
}
```

*/
// ==================================================
// http://www.w3.org/TR/css3-animations/#the-animation-name-property-
// Each of these mixins support comma separated lists of values, which allows different transitions for individual properties to be described in a single style rule. Each value in the list corresponds to the value at that same position in the other properties.
// ==================================================

@mixin pe-animation($animations...) {
  @include _pe-prefixer(animation, $animations, webkit moz spec);
}

@mixin pe-animation-name($names...) {
  @include _pe-prefixer(animation-name, $names, webkit moz spec);
}

@mixin pe-animation-duration($times...) {
  @include _pe-prefixer(animation-duration, $times, webkit moz spec);
}

@mixin pe-animation-timing-function($motions...) {
  // ease | linear | ease-in | ease-out | ease-in-out
  @include _pe-prefixer(animation-timing-function, $motions, webkit moz spec);
}

@mixin pe-animation-iteration-count($values...) {
  // infinite | <number>
  @include _pe-prefixer(animation-iteration-count, $values, webkit moz spec);
}

@mixin pe-animation-direction($directions...) {
  // normal | alternate
  @include _pe-prefixer(animation-direction, $directions, webkit moz spec);
}

@mixin pe-animation-play-state($states...) {
  // running | paused
  @include _pe-prefixer(animation-play-state, $states, webkit moz spec);
}

@mixin pe-animation-delay($times...) {
  @include _pe-prefixer(animation-delay, $times, webkit moz spec);
}

@mixin pe-animation-fill-mode($modes...) {
  // none | forwards | backwards | both
  @include _pe-prefixer(animation-fill-mode, $modes, webkit moz spec);
}
